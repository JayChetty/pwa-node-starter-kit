{"version":3,"sources":["webpack:///webpack/bootstrap f70ce52ebb54a46e3dcb","webpack:///./src/app.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA,KAAI,cAAc,QAAQ,OAAO,QAAP,CAAgB,QAAhB,KAA6B,WAA7B;AACtB;AACA,QAAO,QAAP,CAAgB,QAAhB,KAA6B,OAFP;AAGtB;AACA,QAAO,QAAP,CAAgB,QAAhB,CAAyB,KAAzB,CACE,wDADF,CAJc,CAAlB;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQ,GAAR,CAAa,aAAb,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f70ce52ebb54a46e3dcb\n **/","'use strict';\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n  );\n\n// if ('serviceWorker' in navigator &&\n//     (window.location.protocol === 'https:' || isLocalhost)) {\n//   navigator.serviceWorker.register('service-worker.js')\n//   .then(function(registration) {\n//     // updatefound is fired if service-worker.js changes.\n//     registration.onupdatefound = function() {\n//       // updatefound is also fired the very first time the SW is installed,\n//       // and there's no need to prompt for a reload at that point.\n//       // So check here to see if the page is already controlled,\n//       // i.e. whether there's an existing service worker.\n//       if (navigator.serviceWorker.controller) {\n//         // The updatefound event implies that registration.installing is set:\n//         // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n//         var installingWorker = registration.installing;\n//\n//         installingWorker.onstatechange = function() {\n//           switch (installingWorker.state) {\n//             case 'installed':\n//               // At this point, the old content will have been purged and the\n//               // fresh content will have been added to the cache.\n//               // It's the perfect time to display a \"New content is\n//               // available; please refresh.\" message in the page's interface.\n//               break;\n//\n//             case 'redundant':\n//               throw new Error('The installing ' +\n//                               'service worker became redundant.');\n//\n//             default:\n//               // Ignore\n//           }\n//         };\n//       }\n//     };\n//   }).catch(function(e) {\n//     console.error('Error during service worker registration:', e);\n//   });\n// }\n\nconsole.log( 'App started' );\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app.js\n **/"],"sourceRoot":""}